%% INITIALIZE A = SQUARED EXPONENTIAL GAUSSIAN COVARIANCE MATRIX
clear all;
%size of grid
x = 100;
y = 100;

%generate domain
s = linspace(-3,3,x);
%size of diagonal bump
epsilon = 1e-6;

gauss_matrix = zeros(x,y);

%generate matrix according to formula in CG sampler paper
%http://www.physics.otago.ac.nz/data/fox/publications/CDSamplerAnalysis_20120112.pdf
for i=1:x
    for j=1:y
        arg = -((s(i) - s(j))^2)/(2*(1.5)^2);
        gauss_matrix(i,j) = 2*exp(arg);
    end
end

%add diagonal bump
gauss_matrix = gauss_matrix + epsilon*eye(x)

covariance = gauss_matrix;
evals = eigs(covariance,x);
A = covariance
mat='gauss matrix';
%% INITIALIZE A = RANDOM MATRIX WITH WELL SPACED EIGS
clear all;
%size of matrix
n = 100

%D is our diagonalized matrix with eigenvalues
D = zeros(n,n);

%populate the matrix
for i=1:n
    D(i,i) = 1/i;
end

%normalize the matrix
D_max = D(n,n);
for i=1:n
    D(i,i) = D(i,i)/D_max;
end

%now we want to create a random orthogonal matrix U, as we can generate 
%the matrix corresponding to the eigenvalues in D by going
%UDU', source: https://math.stackexchange.com/questions/54818/construct-matrix-given-eigenvalues-and-eigenvectors
%simply generate a random nxn matrix, use the QR decomposition, and set U=Q
Random_matrix = rand(n,n);
[Q,R] = qr(Random_matrix);

%now we want our result
res = Q*D*Q';
covariance = res;
heatmap(covariance)
evals = eigs(covariance,n);
A = covariance;
mat = 'well spaced eigs'
cond(covariance)
%% INITIALIZE A = 2D LAPLACIAN
clear all;
x = input("Enter the x dimension of the grid: ");
y = input("Enter the y dimension of the grid: ");
alpha = input("Enter the size of the diagonal bump: ");
[lambda,V,A] = laplacian([x,y],{'NN' 'NN'},x*y);
%we will add a constant on the diagonal to make A invertible, 
%so we must also increase the evals by this constant
lambda = lambda + alpha*ones(x*y,1);
A = A + alpha*eye(x*y,x*y);
%evals of cov are 1/eval of A due to inversion of matrix
covariance = inv(A);
evals = eigs(covariance,x*y)
mat = '2d laplacian';

%% SAMPLE AND COMPARE
sprintf('running on example %s',mat')
sprintf('condition number of matrix is %d',cond(A))
[dims,dims] = size(A);
%b = [+-1, +-1, ... , +-1]'
samples=1e3
%set of solver solutions
x_emp_set = zeros(dims,samples);
%set of c_k samples
c_set = zeros(dims,samples);
%number of iterations to do when running CG sampler
iters = 8
count_total = 0
%b is randomly drawn from [-1 1]
%b_rng = [-1 1];
%b = b_rng(randi(numel(b_rng),dims,1))';
for i=1:samples
    if mod(i,1000)==0
        percent = (i/samples) * 100;
        sprintf('%d percent done.',percent)
    end
    %now perform conj grad sample
    %second scenario, different b each time from ~ N(0,I)
    b = randn(dims,1);
    [x_emp,y,c,count] = conj_grad(A,b,iters);
    count_total = count_total + count;
    %sprintf('took %d iterations',count)
    %store corresponding solver solution and sample
    x_emp_set(:,i) = x_emp;
    c_set(:,i) = c;
end
%plot solver solution
average_iters = count_total/samples
sprintf('average iteration number %d',average_iters)
%mean x_emp
x_emp = sort(x_emp_set(:,samples));
plot(sort(x_emp),'o');
hold on;
x = sort(A\b);
plot(x);
legend('CG result', 'result from inversion');
rel_err = abs((norm(x - x_emp)/norm(x)));
title(sprintf('Conjugate gradient solution of Ax=b vs real solution for matrix %s Rel err %d',mat,rel_err));
hold off;

%plot eigenvalues of samples...
cov_emp = cov(c_set');
evals_emp = eigs(cov_emp,dims);
rel_err = norm(A - cov_emp)/norm(A);
figure();
%just plotting the first 20 evals
semilogy(sort(evals(1:20)),'x','MarkerSize',12);
hold on;
semilogy(sort(evals_emp(1:20)),'o','MarkerSize',12);
legend('real eigenvalues', 'CG eigenvalues');
rel_err = norm(cov_emp - covariance)/norm(covariance)
mynorm = norm(cov_emp)
trace_ratio = trace(cov_emp)/trace(covariance)
title(sprintf('evals of %s. Rel err %d, 2-norm of var(c_k) %d, trace ratio %d',mat,rel_err,mynorm,trace_ratio));

%plot heatmap of real and calculated covariance, with heatmap of relative
%error
figure()
subplot(1,3,1);
heatmap(A)
title('real covariance')
heatmap(cov_emp)
title('empirical covariance')
rel_err = (A-cov_emp)/norm(A)
heatmap(rel_err)
title('relative difference (real-